#define MP_MAX_UNCOMPRESSED_TEXT_LEN (73)
MP_COMPRESSED_DATA("can'\364objec\364doesn'\364invali\344'%q\247argument\363mus\364argumen\364functio\356'%s\247no\364forma\364b\345exis\364unsupporte\344%\344t\357expect\363o\346implemente\344typ\345conver\364keywor\344strin\347positiona\354specifie\362supporte\344fo\362inde\370i\356i\363require\344wit\350\341lengt\350ar\347attribut\345intege\362to\357a\356empt\371isn'\364rang\345require\363reserve\344assignmen\364identifie\362outsid\345expectin\347generato\362valu\345ExtIn\364an\344synta\370expecte\344overflo\367sequenc\345fro\355comple\370erro\362fiel\344ha\363missin\347need\363n\357o\362nativ\345retur\356Timer(%d\251hav\345in\364nam\345operatio\356ou\364redefine\344afte\362callabl\345foun\344multipl\345nonloca\354registe\362tupl\345CAN(%d\251allowe\344alread\371bu\364indice\363struct\272unknow\356%\361lis\364lon\347zer\357impor\364metho\344numbe\362sck/mosi/mis\357specificatio\356value\363vecto\362incompatibl\345issubclass(\251%\363a\364byte\363clas\363give\356instructio\356labe\354loca\354pi\356se\364stor\345us\345wron\347allocatio\356annotatio\356conversio\356expressio\356implicitl\371incomplet\345parameter\363unexpecte\344(%d\251.mp\371assemble\362automati\343bit\363")
MP_MATCH_COMPRESSED("%c needs int or char", "\377%c\277\306\301char")
MP_MATCH_COMPRESSED("%q index out of range", "\377\331\234\311\222\252")
MP_MATCH_COMPRESSED("%q indices must be integers, not %s", "\377\331\326\206\214integers,\212\346")
MP_MATCH_COMPRESSED("'%q' argument required", "\377\204\207\237")
MP_MATCH_COMPRESSED("'%s' expects a label", "\377\211\221\241\354")
MP_MATCH_COMPRESSED("'%s' expects a register", "\377\211\221\241\320")
MP_MATCH_COMPRESSED("'%s' expects a special register", "\377\211\221\241special\320")
MP_MATCH_COMPRESSED("'%s' expects an FPU register", "\377\211\221\247FPU\320")
MP_MATCH_COMPRESSED("'%s' expects an address of the form [a, b]", "\377\211\221\247address\222the form [a, b]")
MP_MATCH_COMPRESSED("'%s' expects an integer", "\377\211\221\247\245")
MP_MATCH_COMPRESSED("'%s' expects at most r%d", "\377\211\221\347most r%d")
MP_MATCH_COMPRESSED("'%s' expects {r0, r1, ...}", "\377\211\221{r0, r1, ...}")
MP_MATCH_COMPRESSED("'%s' integer 0x%x doesn't fit in mask 0x%x", "\377\211\2450x%x\202fit\235mask 0x%x")
MP_MATCH_COMPRESSED("'%s' object doesn't support item assignment", "\377\211\201\202support item\255")
MP_MATCH_COMPRESSED("'%s' object doesn't support item deletion", "\377\211\201\202support item deletion")
MP_MATCH_COMPRESSED("'%s' object has no attribute '%q'", "\377\211\201\275\300\244\204")
MP_MATCH_COMPRESSED("'%s' object isn't an iterator", "\377\211\201\251\247iterator")
MP_MATCH_COMPRESSED("'%s' object isn't callable", "\377\211\201\251\314")
MP_MATCH_COMPRESSED("'%s' object isn't iterable", "\377\211\201\251iterable")
MP_MATCH_COMPRESSED("'%s' object isn't subscriptable", "\377\211\201\251subscriptable")
MP_MATCH_COMPRESSED("'=' alignment not allowed in string format specifier", "\377'=' alignment\212\323\235\227\213\231")
MP_MATCH_COMPRESSED("'align' requires 1 argument", "\377'align'\2531\207")
MP_MATCH_COMPRESSED("'await' outside function", "\377'await'\257\210")
MP_MATCH_COMPRESSED("'break'/'continue' outside loop", "\377'break'/'continue'\257loop")
MP_MATCH_COMPRESSED("'data' requires at least 2 arguments", "\377'data'\253\347least 2\205")
MP_MATCH_COMPRESSED("'data' requires integer arguments", "\377'data'\253\245\205")
MP_MATCH_COMPRESSED("'label' requires 1 argument", "\377'label'\2531\207")
MP_MATCH_COMPRESSED("'return' outside function", "\377'return'\257\210")
MP_MATCH_COMPRESSED("'yield' outside function", "\377'yield'\257\210")
MP_MATCH_COMPRESSED("* arg after **", "\377*\243\313**")
MP_MATCH_COMPRESSED("*x must be assignment target", "\377*x\206\214\255target")
MP_MATCH_COMPRESSED("0.0 to a complex power", "\3770.0\220\241\272power")
MP_MATCH_COMPRESSED("CAN data field too long", "\377CAN data\274\246\333")
MP_MATCH_COMPRESSED("CAN filter parameter error", "\377CAN filter parameter\273")
MP_MATCH_COMPRESSED("CAN(%d) doesn't exist", "\377\322\202\215")
MP_MATCH_COMPRESSED("CAN(%d) init failure", "\377\322init failure")
MP_MATCH_COMPRESSED("CAN(%d) is reserved", "\377\322\236\254")
MP_MATCH_COMPRESSED("CAN(%s) doesn't exist", "\377CAN(%s)\202\215")
MP_MATCH_COMPRESSED("ExtInt vector %d < 16, use a Pin object", "\377\263\343\217< 16,\361\241Pin\201")
MP_MATCH_COMPRESSED("ExtInt vector %d >= max of %d", "\377\263\343\217>= max\222\217")
MP_MATCH_COMPRESSED("ExtInt vector %d is already in use", "\377\263\343\217\236\324\235\361")
MP_MATCH_COMPRESSED("I/O operation on closed file", "\377I/O\310on closed file")
MP_MATCH_COMPRESSED("I2C operation not supported", "\377I2C\310\212\232")
MP_MATCH_COMPRESSED("I2C(%d) doesn't exist", "\377I2C(%d)\202\215")
MP_MATCH_COMPRESSED("I2C(%d) is reserved", "\377I2C(%d)\236\254")
MP_MATCH_COMPRESSED("I2C(%s) doesn't exist", "\377I2C(%s)\202\215")
MP_MATCH_COMPRESSED("IRQ resource already taken by Pin('%q')", "\377IRQ resource\324taken by Pin('%q')")
MP_MATCH_COMPRESSED("LED(%d) doesn't exist", "\377LED(%d)\202\215")
MP_MATCH_COMPRESSED("LHS of keyword arg must be an id", "\377LHS\222\226\243\206\214\247id")
MP_MATCH_COMPRESSED("Pin(%q) does not have ADC capabilities", "\377Pin(%q) does\212\305ADC capabilities")
MP_MATCH_COMPRESSED("Pin(%q) doesn't have an alt for Timer(%d)", "\377Pin(%q)\202\305\247alt\233\304")
MP_MATCH_COMPRESSED("Pin(%s) doesn't exist", "\377Pin(%s)\202\215")
MP_MATCH_COMPRESSED("Pin.mapper didn't return a Pin object", "\377Pin.mapper didn't\303\241Pin\201")
MP_MATCH_COMPRESSED("SPI(%d) doesn't exist", "\377SPI(%d)\202\215")
MP_MATCH_COMPRESSED("SPI(%d) is reserved", "\377SPI(%d)\236\254")
MP_MATCH_COMPRESSED("SPI(%s) doesn't exist", "\377SPI(%s)\202\215")
MP_MATCH_COMPRESSED("Timer doesn't exist", "\377Timer\202\215")
MP_MATCH_COMPRESSED("Timer(%d) doesn't exist", "\377\304\202\215")
MP_MATCH_COMPRESSED("Timer(%d) is reserved", "\377\304\236\254")
MP_MATCH_COMPRESSED("UART is static and rxbuf can't be changed", "\377UART\236static\264rxbuf\200\214changed")
MP_MATCH_COMPRESSED("UART(%d) doesn't exist", "\377UART(%d)\202\215")
MP_MATCH_COMPRESSED("UART(%d) is reserved", "\377UART(%d)\236\254")
MP_MATCH_COMPRESSED("UART(%s) doesn't exist", "\377UART(%s)\202\215")
MP_MATCH_COMPRESSED("WDT timeout too long", "\377WDT timeout\246\333")
MP_MATCH_COMPRESSED("WDT timeout too short", "\377WDT timeout\246short")
MP_MATCH_COMPRESSED("WDT(%d) doesn't exist", "\377WDT(%d)\202\215")
MP_MATCH_COMPRESSED("__init__() should return None, not '%s'", "\377__init__() should\303None,\212\211")
MP_MATCH_COMPRESSED("abort() called", "abort() called")
MP_MATCH_COMPRESSED("address %08x is not aligned to %d bytes", "\377address %08x\236\212aligned\220\217\350")
MP_MATCH_COMPRESSED("annotation must be an identifier", "\377\364\206\214\247\256")
MP_MATCH_COMPRESSED("arg is an empty sequence", "\377\243\236\247\250\270")
MP_MATCH_COMPRESSED("arg must be user-type", "\377\243\206\214user-type")
MP_MATCH_COMPRESSED("argument has wrong type", "\377\207\275\362\224")
MP_MATCH_COMPRESSED("argument name reused", "\377\207\307reused")
MP_MATCH_COMPRESSED("argument num/types mismatch", "\377\207num/types mismatch")
MP_MATCH_COMPRESSED("array/bytes required on right side", "\377array/bytes\237on right side")
MP_MATCH_COMPRESSED("async for/with outside async function", "\377async for/with\257async\210")
MP_MATCH_COMPRESSED("attributes not supported yet", "\377attributes\212\232yet")
MP_MATCH_COMPRESSED("bad compile mode", "bad compile mode")
MP_MATCH_COMPRESSED("bad conversion specifier", "\377bad\365\231")
MP_MATCH_COMPRESSED("bad typecode", "bad typecode")
MP_MATCH_COMPRESSED("binary op %q not implemented", "\377binary op\331\212\223")
MP_MATCH_COMPRESSED("bits must be 32 or less", "\377\377\206\21432\301less")
MP_MATCH_COMPRESSED("bits must be 8", "\377\377\206\2148")
MP_MATCH_COMPRESSED("branch not in range", "\377branch\212\235\252")
MP_MATCH_COMPRESSED("buffer too small", "\377buffer\246small")
MP_MATCH_COMPRESSED("buffers must be the same length", "\377buffers\206\214the same\242")
MP_MATCH_COMPRESSED("bytecode overflow", "\377bytecode\267")
MP_MATCH_COMPRESSED("bytes value out of range", "\377\350\262\311\222\252")
MP_MATCH_COMPRESSED("calibration value out of range", "\377calibration\262\311\222\252")
MP_MATCH_COMPRESSED("callback must be None or a callable object", "\377callback\206\214None\301\241\314\201")
MP_MATCH_COMPRESSED("can only have up to 4 parameters to Thumb assembly", "\377can only\305up\2204\371\220Thumb assembly")
MP_MATCH_COMPRESSED("can't add special method to already-subclassed class", "\377\200add special\336\220already-subclassed\351")
MP_MATCH_COMPRESSED("can't assign to expression", "\377\200assign\220\366")
MP_MATCH_COMPRESSED("can't cancel self", "\377\200cancel self")
MP_MATCH_COMPRESSED("can't convert %s to complex", "\377\200\225\346\220\272")
MP_MATCH_COMPRESSED("can't convert %s to float", "\377\200\225\346\220float")
MP_MATCH_COMPRESSED("can't convert %s to int", "\377\200\225\346\220\306")
MP_MATCH_COMPRESSED("can't convert '%q' object to %q implicitly", "\377\200\225\204\201\220\331\367")
MP_MATCH_COMPRESSED("can't convert NaN to int", "\377\200\225NaN\220\306")
MP_MATCH_COMPRESSED("can't convert inf to int", "\377\200\225inf\220\306")
MP_MATCH_COMPRESSED("can't create '%q' instances", "\377\200create\204instances")
MP_MATCH_COMPRESSED("can't declare nonlocal in outer code", "\377\200declare\317\235outer code")
MP_MATCH_COMPRESSED("can't delete expression", "\377\200delete\366")
MP_MATCH_COMPRESSED("can't do binary op between '%q' and '%q'", "\377\200do binary op between\204\264\204")
MP_MATCH_COMPRESSED("can't implicitly convert '%q' to 'bool'", "\377\200\367\225\204\220'bool'")
MP_MATCH_COMPRESSED("can't import name %q", "\377\200\335\307\331")
MP_MATCH_COMPRESSED("can't load from '%q'", "\377\200load\271\204")
MP_MATCH_COMPRESSED("can't load with '%q' index", "\377\200load\240\204\234")
MP_MATCH_COMPRESSED("can't perform relative import", "\377\200perform relative\335")
MP_MATCH_COMPRESSED("can't send non-None value to a just-started generator", "\377\200send non-None\262\220\241just-started\261")
MP_MATCH_COMPRESSED("can't set attribute", "\377\200\357\244")
MP_MATCH_COMPRESSED("can't store '%q'", "\377\200\360\204")
MP_MATCH_COMPRESSED("can't store to '%q'", "\377\200\360\220\204")
MP_MATCH_COMPRESSED("can't store with '%q' index", "\377\200\360\240\204\234")
MP_MATCH_COMPRESSED("can't switch from automatic field numbering to manual field specification", "\377\200switch\271\376\274numbering\220manual\274\341")
MP_MATCH_COMPRESSED("can't switch from manual field specification to automatic field numbering", "\377\200switch\271manual\274\341\220\376\274numbering")
MP_MATCH_COMPRESSED("can't truncate-divide a complex number", "\377\200truncate-divide\241\272\337")
MP_MATCH_COMPRESSED("can't unambiguously get sizeof scalar", "\377\200unambiguously get sizeof scalar")
MP_MATCH_COMPRESSED("can't wait", "\377\200wait")
MP_MATCH_COMPRESSED("casting", "casting")
MP_MATCH_COMPRESSED("chr() arg not in range(0x110000)", "\377chr()\243\212\235range(0x110000)")
MP_MATCH_COMPRESSED("comparison of int and uint", "\377comparison\222\306\264uint")
MP_MATCH_COMPRESSED("complex divide by zero", "\377\272divide by\334")
MP_MATCH_COMPRESSED("compression header", "compression header")
MP_MATCH_COMPRESSED("conversion to object", "\377\365\220\201")
MP_MATCH_COMPRESSED("couldn't match baudrate and sample point", "\377couldn't match baudrate\264sample point")
MP_MATCH_COMPRESSED("default 'except' must be last", "\377default 'except'\206\214last")
MP_MATCH_COMPRESSED("dict update sequence has wrong length", "\377dict update\270\275\362\242")
MP_MATCH_COMPRESSED("div/mod not implemented for uint", "\377div/mod\212\223\233uint")
MP_MATCH_COMPRESSED("divide by zero", "\377divide by\334")
MP_MATCH_COMPRESSED("empty", "\377\250")
MP_MATCH_COMPRESSED("empty heap", "\377\250heap")
MP_MATCH_COMPRESSED("empty separator", "\377\250separator")
MP_MATCH_COMPRESSED("encoder not supported on timer %d", "\377encoder\212\232on timer\217")
MP_MATCH_COMPRESSED("encoding", "encoding")
MP_MATCH_COMPRESSED("error in regex", "\377\273\235regex")
MP_MATCH_COMPRESSED("exceptions must derive from BaseException", "\377exceptions\206derive\271BaseException")
MP_MATCH_COMPRESSED("expected ':' after format specifier", "\377\266':'\313\213\231")
MP_MATCH_COMPRESSED("expecting an SPI object", "\377\260\247SPI\201")
MP_MATCH_COMPRESSED("expecting an assembler instruction", "\377\260\247\375\353")
MP_MATCH_COMPRESSED("expecting just a value for set", "\377\260just\241\262\233\357")
MP_MATCH_COMPRESSED("expecting key:value for dict", "\377\260key:value\233dict")
MP_MATCH_COMPRESSED("explicit choice of sck/mosi/miso is not implemented", "\377explicit choice\222\340\236\212\223")
MP_MATCH_COMPRESSED("explicit choice of scl/sda is not implemented", "\377explicit choice\222scl/sda\236\212\223")
MP_MATCH_COMPRESSED("extra keyword arguments given", "\377extra\226\205\352")
MP_MATCH_COMPRESSED("extra positional arguments given", "\377extra\230\205\352")
MP_MATCH_COMPRESSED("firstbit must be MSB", "\377firstbit\206\214MSB")
MP_MATCH_COMPRESSED("format needs a dict", "\377\213\277\241dict")
MP_MATCH_COMPRESSED("format string didn't convert all arguments", "\377\213\227didn't\225all\205")
MP_MATCH_COMPRESSED("format string needs more arguments", "\377\213\227\277more\205")
MP_MATCH_COMPRESSED("full", "full")
MP_MATCH_COMPRESSED("function doesn't take keyword arguments", "\377\210\202take\226\205")
MP_MATCH_COMPRESSED("function expected at most %d arguments, got %d", "\377\210\266\347most\217arguments, got\217")
MP_MATCH_COMPRESSED("function got multiple values for argument '%q'", "\377\210got\316\342\233\207\204")
MP_MATCH_COMPRESSED("function missing %d required positional arguments", "\377\210\276\217\237\230\205")
MP_MATCH_COMPRESSED("function missing keyword-only argument", "\377\210\276keyword-only\207")
MP_MATCH_COMPRESSED("function missing required keyword argument '%q'", "\377\210\276\237\226\207\204")
MP_MATCH_COMPRESSED("function missing required positional argument #%d", "\377\210\276\237\230\207#%d")
MP_MATCH_COMPRESSED("function takes %d positional arguments but %d were given", "\377\210takes\217\230\205\325\217were\352")
MP_MATCH_COMPRESSED("generator already executing", "\377\261\324executing")
MP_MATCH_COMPRESSED("generator ignored GeneratorExit", "\377\261ignored GeneratorExit")
MP_MATCH_COMPRESSED("generator raised StopIteration", "\377\261raised StopIteration")
MP_MATCH_COMPRESSED("handler must be None or callable", "\377handler\206\214None\301\314")
MP_MATCH_COMPRESSED("hash is final", "\377hash\236final")
MP_MATCH_COMPRESSED("heap must be a list", "\377heap\206\214\241\332")
MP_MATCH_COMPRESSED("identifier redefined as global", "\377\256\312as global")
MP_MATCH_COMPRESSED("identifier redefined as nonlocal", "\377\256\312as\317")
MP_MATCH_COMPRESSED("import * not at module level", "\377\335*\212\347module level")
MP_MATCH_COMPRESSED("incompatible .mpy arch", "\377\344\374arch")
MP_MATCH_COMPRESSED("incompatible .mpy file", "\377\344\374file")
MP_MATCH_COMPRESSED("incomplete format", "\377\370\213")
MP_MATCH_COMPRESSED("incomplete format key", "\377\370\213key")
MP_MATCH_COMPRESSED("incorrect padding", "incorrect padding")
MP_MATCH_COMPRESSED("inline assembler must be a function", "\377inline\375\206\214\241\210")
MP_MATCH_COMPRESSED("int() arg 2 must be >= 2 and <= 36", "\377int()\2432\206\214>= 2\264<= 36")
MP_MATCH_COMPRESSED("integer needed", "\377\245needed")
MP_MATCH_COMPRESSED("invalid ExtInt Mode: %d", "\377\203\263Mode:\217")
MP_MATCH_COMPRESSED("invalid ExtInt Pull: %d", "\377\203\263Pull:\217")
MP_MATCH_COMPRESSED("invalid addrsize", "\377\203addrsize")
MP_MATCH_COMPRESSED("invalid arguments", "\377\203\205")
MP_MATCH_COMPRESSED("invalid channel (%d)", "\377\203channel\373")
MP_MATCH_COMPRESSED("invalid dupterm index", "\377\203dupterm\234")
MP_MATCH_COMPRESSED("invalid format", "\377\203\213")
MP_MATCH_COMPRESSED("invalid format specifier", "\377\203\213\231")
MP_MATCH_COMPRESSED("invalid freq", "\377\203freq")
MP_MATCH_COMPRESSED("invalid micropython decorator", "\377\203micropython decorator")
MP_MATCH_COMPRESSED("invalid mode (%d)", "\377\203mode\373")
MP_MATCH_COMPRESSED("invalid pin af: %d", "\377\203\356af:\217")
MP_MATCH_COMPRESSED("invalid pin mode: %d", "\377\203\356mode:\217")
MP_MATCH_COMPRESSED("invalid pin pull: %d", "\377\203\356pull:\217")
MP_MATCH_COMPRESSED("invalid polarity (%d)", "\377\203polarity\373")
MP_MATCH_COMPRESSED("invalid syntax", "\377\203\265")
MP_MATCH_COMPRESSED("invalid syntax for integer with base %d", "\377\203\265\233\245\240base\217")
MP_MATCH_COMPRESSED("invalid syntax for number", "\377\203\265\233\337")
MP_MATCH_COMPRESSED("issubclass() arg 1 must be a class", "\377\345\2431\206\214\241\351")
MP_MATCH_COMPRESSED("issubclass() arg 2 must be a class or a tuple of classes", "\377\345\2432\206\214\241\351\301\241\321\222classes")
MP_MATCH_COMPRESSED("join expects a list of str/bytes objects consistent with self object", "\377join\221\241\332\222str/bytes objects consistent\240self\201")
MP_MATCH_COMPRESSED("keyword argument(s) not yet implemented - use normal args instead", "\377\226argument(s)\212yet\223-\361normal args instead")
MP_MATCH_COMPRESSED("label '%q' not defined", "\377\354\204\212defined")
MP_MATCH_COMPRESSED("label redefined", "\377\354\312")
MP_MATCH_COMPRESSED("lhs and rhs should be compatible", "\377lhs\264rhs should\214compatible")
MP_MATCH_COMPRESSED("local '%q' has type '%q' but source is '%q'", "\377\355\204\275\224\204\325source\236\204")
MP_MATCH_COMPRESSED("local '%q' used before type known", "\377\355\204used before\224known")
MP_MATCH_COMPRESSED("local variable referenced before assignment", "\377\355variable referenced before\255")
MP_MATCH_COMPRESSED("malformed f-string", "malformed f-string")
MP_MATCH_COMPRESSED("math domain error", "\377math domain\273")
MP_MATCH_COMPRESSED("memory allocation failed, allocating %u bytes", "\377memory\363failed, allocating %u\350")
MP_MATCH_COMPRESSED("memory allocation failed, heap is locked", "\377memory\363failed, heap\236locked")
MP_MATCH_COMPRESSED("mktime needs a tuple of length 8 or 9 (%d given)", "\377mktime\277\241\321\222\2428\3019 (%d given)")
MP_MATCH_COMPRESSED("multiple *x in assignment", "\377\316*x\235\255")
MP_MATCH_COMPRESSED("multiple bases have instance lay-out conflict", "\377\316bases\305instance lay-out conflict")
MP_MATCH_COMPRESSED("must have positive freq", "\377\206\305positive freq")
MP_MATCH_COMPRESSED("must raise an object", "\377\206raise\247\201")
MP_MATCH_COMPRESSED("must specify all of sck/mosi/miso", "\377\206specify all\222\340")
MP_MATCH_COMPRESSED("must specify either freq, period, or prescaler and period", "\377\206specify either freq, period,\301prescaler\264period")
MP_MATCH_COMPRESSED("must use keyword argument for key function", "\377\206\361\226\207\233key\210")
MP_MATCH_COMPRESSED("name '%q' isn't defined", "\377\307\204\251defined")
MP_MATCH_COMPRESSED("name too long", "\377\307\246\333")
MP_MATCH_COMPRESSED("native code in .mpy unsupported", "\377\302code\235\374\216")
MP_MATCH_COMPRESSED("native method too big", "\377\302\336\246big")
MP_MATCH_COMPRESSED("native yield", "\377\302yield")
MP_MATCH_COMPRESSED("need a Timer object", "\377need\241Timer\201")
MP_MATCH_COMPRESSED("need more than %d values to unpack", "\377need more than\217\342\220unpack")
MP_MATCH_COMPRESSED("negative factorial", "negative factorial")
MP_MATCH_COMPRESSED("negative shift count", "negative shift count")
MP_MATCH_COMPRESSED("no active exception to reraise", "\377\300active exception\220reraise")
MP_MATCH_COMPRESSED("no available NIC", "\377\300available NIC")
MP_MATCH_COMPRESSED("no binding for nonlocal found", "\377\300binding\233\317\315")
MP_MATCH_COMPRESSED("no module named '%q'", "\377\300module named\204")
MP_MATCH_COMPRESSED("no such attribute", "\377\300such\244")
MP_MATCH_COMPRESSED("non-default argument follows default argument", "\377non-default\207follows default\207")
MP_MATCH_COMPRESSED("non-hex digit found", "\377non-hex digit\315")
MP_MATCH_COMPRESSED("not a constant", "\377\212\241constant")
MP_MATCH_COMPRESSED("object '%s' isn't a tuple or list", "\377\201\211\251\241\321\301\332")
MP_MATCH_COMPRESSED("object not in sequence", "\377\201\212\235\270")
MP_MATCH_COMPRESSED("object of type '%s' has no len()", "\377\201\222\224\211\275\300len()")
MP_MATCH_COMPRESSED("object with buffer protocol required", "\377\201\240buffer protocol\237")
MP_MATCH_COMPRESSED("odd-length string", "\377odd-length\227")
MP_MATCH_COMPRESSED("only slices with step=1 (aka None) are supported", "\377only slices\240step=1 (aka None) are\232")
MP_MATCH_COMPRESSED("opcode", "opcode")
MP_MATCH_COMPRESSED("ord() expected a character, but string of length %d found", "\377ord()\266\241character,\325\227\222\242\217\315")
MP_MATCH_COMPRESSED("overflow converting long int to machine word", "\377\267converting\333\306\220machine word")
MP_MATCH_COMPRESSED("parameters must be registers in sequence r0 to r3", "\377\371\206\214registers\235\270r0\220r3")
MP_MATCH_COMPRESSED("period too large", "\377period\246large")
MP_MATCH_COMPRESSED("pin argument needs to be be a Pin type", "\377\356\207\277\220\214\214\241Pin\224")
MP_MATCH_COMPRESSED("pop from an empty set", "\377pop\271\247\250\357")
MP_MATCH_COMPRESSED("pop from empty list", "\377pop\271\250\332")
MP_MATCH_COMPRESSED("popitem(): dictionary is empty", "\377popitem(): dictionary\236\250")
MP_MATCH_COMPRESSED("positional arg after **", "\377\230\243\313**")
MP_MATCH_COMPRESSED("positional arg after keyword arg", "\377\230\243\313\226\243")
MP_MATCH_COMPRESSED("pow() with 3 arguments requires integers", "\377pow()\2403\205\253integers")
MP_MATCH_COMPRESSED("queue overflow", "\377queue\267")
MP_MATCH_COMPRESSED("raw f-strings are not supported", "\377raw f-strings are\212\232")
MP_MATCH_COMPRESSED("recv must be same length as send", "\377recv\206\214same\242as send")
MP_MATCH_COMPRESSED("requested length %d but object has length %d", "\377requested\242\217\325\201\275\242\217")
MP_MATCH_COMPRESSED("return annotation must be an identifier", "\377\303\364\206\214\247\256")
MP_MATCH_COMPRESSED("return expected '%q' but got '%q'", "\377\303\266\204\325got\204")
MP_MATCH_COMPRESSED("rsplit(None,n)", "rsplit(None,n)")
MP_MATCH_COMPRESSED("schedule queue full", "schedule queue full")
MP_MATCH_COMPRESSED("set baudrate %d is not within 5%% of desired value", "\377\357baudrate\217\236\212within 5%%\222desired\262")
MP_MATCH_COMPRESSED("sign not allowed in string format specifier", "\377sign\212\323\235\227\213\231")
MP_MATCH_COMPRESSED("sign not allowed with integer format specifier 'c'", "\377sign\212\323\240\245\213\231'c'")
MP_MATCH_COMPRESSED("single '}' encountered in format string", "\377single '}' encountered\235\213\227")
MP_MATCH_COMPRESSED("slice step can't be zero", "\377slice step\200\214\334")
MP_MATCH_COMPRESSED("splitting with sub-captures", "\377splitting\240sub-captures")
MP_MATCH_COMPRESSED("start/end indices", "\377start/end\326")
MP_MATCH_COMPRESSED("stream operation not supported", "\377stream\310\212\232")
MP_MATCH_COMPRESSED("string index out of range", "\377\227\234\311\222\252")
MP_MATCH_COMPRESSED("string indices must be integers, not %s", "\377\227\326\206\214integers,\212\346")
MP_MATCH_COMPRESSED("struct: can't index", "\377\327\200\234")
MP_MATCH_COMPRESSED("struct: index out of range", "\377\327\234\311\222\252")
MP_MATCH_COMPRESSED("struct: no fields", "\377\327\300fields")
MP_MATCH_COMPRESSED("substring not found", "\377substring\212\315")
MP_MATCH_COMPRESSED("super() can't find self", "\377super()\200find self")
MP_MATCH_COMPRESSED("syntax error in JSON", "\377\265\273\235JSON")
MP_MATCH_COMPRESSED("syntax error in uctypes descriptor", "\377\265\273\235uctypes descriptor")
MP_MATCH_COMPRESSED("ticks interval overflow", "\377ticks interval\267")
MP_MATCH_COMPRESSED("too many args", "\377\246many args")
MP_MATCH_COMPRESSED("too many locals for native method", "\377\246many locals\233\302\336")
MP_MATCH_COMPRESSED("too many values to unpack (expected %d)", "\377\246many\342\220unpack (expected %d)")
MP_MATCH_COMPRESSED("trigger 0x%08x unsupported", "\377trigger 0x%08x\216")
MP_MATCH_COMPRESSED("tuple index out of range", "\377\321\234\311\222\252")
MP_MATCH_COMPRESSED("type '%q' isn't an acceptable base type", "\377\224\204\251\247acceptable base\224")
MP_MATCH_COMPRESSED("type object '%q' has no attribute '%q'", "\377\224\201\204\275\300\244\204")
MP_MATCH_COMPRESSED("type takes 1 or 3 arguments", "\377\224takes 1\3013\205")
MP_MATCH_COMPRESSED("unary op %q not implemented", "\377unary op\331\212\223")
MP_MATCH_COMPRESSED("unexpected indent", "\377\372indent")
MP_MATCH_COMPRESSED("unexpected keyword argument '%q'", "\377\372\226\207\204")
MP_MATCH_COMPRESSED("unicode name escapes", "\377unicode\307escapes")
MP_MATCH_COMPRESSED("unindent doesn't match any outer indent level", "\377unindent\202match any outer indent level")
MP_MATCH_COMPRESSED("unknown format code '%c' for object of type '%s'", "\377\330\213code '%c'\233\201\222\224\211")
MP_MATCH_COMPRESSED("unknown type", "\377\330\224")
MP_MATCH_COMPRESSED("unknown type '%q'", "\377\330\224\204")
MP_MATCH_COMPRESSED("unmatched '{' in format", "\377unmatched '{'\235\213")
MP_MATCH_COMPRESSED("unreadable attribute", "\377unreadable\244")
MP_MATCH_COMPRESSED("unsupported Thumb instruction '%s' with %d arguments", "\377\216Thumb\353\211\240\217\205")
MP_MATCH_COMPRESSED("unsupported combination of bits and parity", "\377\216combination\222\377\264parity")
MP_MATCH_COMPRESSED("unsupported format character '%c' (0x%x) at index %d", "\377\216\213character '%c' (0x%x)\347\234\217")
MP_MATCH_COMPRESSED("unsupported type for %q: '%s'", "\377\216\224\233%q:\211")
MP_MATCH_COMPRESSED("unsupported types for %q: '%s', '%s'", "\377\216types\233%q: '%s',\211")
MP_MATCH_COMPRESSED("wakeup value too large", "\377wakeup\262\246large")
MP_MATCH_COMPRESSED("wrong number of arguments", "\377\362\337\222\205")
MP_MATCH_COMPRESSED("zero step", "\377\334step")
// Total input length:      8952
// Total compressed length: 4511
// Total data length:       1173
// Predicted saving:        3268

// gzip length:             4846
// Percentage of gzip:      117.3%
// zlib length:             4834
// Percentage of zlib:      117.6%
